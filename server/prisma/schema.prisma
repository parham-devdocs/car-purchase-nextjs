// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id                    Int              @id @default(autoincrement())
  model                 String           @unique
  type                  VehicleType      @default(Car)
  automaticTransmission Boolean          @default(true)
  pricePerDay           Int
  quantity              Int
  available             Boolean
  maxPassengers         Int
  numberPlate           Int             @unique
  numberOfDoors         Int
  luggageCapacity       Int
  image                 String
  reservationId         Int?             @unique
  reservations          Reservation[]
  options               String[]
}

model User {
  id            Int          @id @default(autoincrement())
  username      String       @unique
  password      String
  email         String       @unique
  age           Int
  licenceNumber Int
  firstName     String
  lastName      String
  phoneNumber   String
  receiveEmails Boolean      @default(true)
  role          String    @default("user")
  refreshToken  String?
  reservation   Reservation[] @relation()
}

model Location {
  id                 Int           @id @default(autoincrement())
  type               LocationTypes
  country            String
  continent          String
  city               String
  address            String
  returnReservations Reservation[] @relation("ReturnLocationRelation")
  pickupReservations Reservation[] @relation("PickupLocationRelation")
  @@unique([country, city, address])

}

model Reservation {
  id               Int      @id @default(autoincrement())
  userId           Int      @unique  // Ensures only one reservation per user
  user             User     @relation(fields: [userId], references: [id])
  vehicleId        Int
  vehicle          Vehicle? @relation(fields: [vehicleId], references: [id])

  pickupLocationId Int
  pickupLocation   Location @relation("PickupLocationRelation", fields: [pickupLocationId], references: [id])

  returnLocationId Int
  returnLocation   Location @relation("ReturnLocationRelation", fields: [returnLocationId], references: [id])

  returnTime       String
  returnDate       String
  pickupTime       String
  pickupDate       String
}
enum VehicleType {
  Van
  Car
  Truck
  SUV
}

enum VehicleOptions {
  CruiseControl
  AirConditioner
  RWD
  BlueTooth
  Sunroof
  LeatherSeats
  GasolineVehicle
}

enum LocationTypes {
  Hotel
  Airport
}